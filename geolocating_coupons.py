# -*- coding: utf-8 -*-
"""Geolocating Coupons

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DyQm-Hbl9LBj_5mGgklf2j6KfkYu7xd9
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt

# Load and preview data
data = pd.read_csv('/content/VisaDataFinalComp.csv')

!pip install pgeocode

import pgeocode
from geopy.distance import geodesic
import matplotlib.pyplot as plt

# insert store location
store_lat, store_lon = 39.1031, -84.5120

# insert user zip code
user_zipcode = "30078"

# get latitude and longitude from user's zip code
nomi = pgeocode.Nominatim('US')
result = nomi.query_postal_code(user_zipcode)

# check if latitude and longitude are valid
if result.latitude is not None and result.longitude is not None:
    user_lat, user_lon = result.latitude, result.longitude
    print(f"User location for ZIP code {user_zipcode}: ({user_lat}, {user_lon})")

    # Check proximity to store
    radius_km = 10  #insert geofence radius
    def check_proximity(user_lat, user_lon, store_lat, store_lon, radius_km):
        user_location = (user_lat, user_lon)
        store_location = (store_lat, store_lon)
        distance_km = geodesic(user_location, store_location).km
        # returns if within geofence and distance
        return distance_km <= radius_km, distance_km

    is_near_store, distance_to_store = check_proximity(
        user_lat, user_lon, store_lat, store_lon, radius_km
    )

    # generate the offer based on proximity
    offer = (
        f"Get 20% off at our Cincinnati store today!" if is_near_store else None
    )

    # summary table as a DataFrame
    data = {
        "ZIP Code": [user_zipcode],
        "Latitude": [user_lat],
        "Longitude": [user_lon],
        "Distance to Store (km)": [round(distance_to_store, 2)],
        "Within Geofence": ["Yes" if is_near_store else "No"],
        "Offer": [offer if offer else "Not eligible"],
    }

    df = pd.DataFrame(data)
    print(df)

    # visualize user and store locations
    plt.figure(figsize=(8, 6))
    plt.scatter(
        store_lon,
        store_lat,
        color="blue",
        label="Store Location",
        s=100,
    )  # Store
    plt.scatter(
        user_lon,
        user_lat,
        color="green" if is_near_store else "red",
        label="User Location",
        s=100,
    )  # User
    plt.title("Geofence Visualization")
    plt.xlabel("Longitude")
    plt.ylabel("Latitude")
    plt.legend()
    plt.grid()


    plt.text(store_lon + 0.01, store_lat, "Store", fontsize=9, color="blue")
    plt.text(
        user_lon + 0.01,
        user_lat,
        f"User (ZIP: {user_zipcode})",
        fontsize=9,
        color="green" if is_near_store else "red",
    )

    # show geofence as a circle
    from matplotlib.patches import Circle
    import matplotlib.pyplot as plt

    # add geofence radius
    circle = Circle(
        (store_lon, store_lat),
        0.1 * radius_km,
        color="blue",
        fill=False,
        linestyle="--",
        linewidth=1.5,
    )
    plt.gca().add_patch(circle)

    plt.show()
else:
    print(f"Could not find location data for ZIP code: {user_zipcode}")